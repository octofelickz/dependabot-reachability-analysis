name: Reachability Analysis
description: Perform vulnerability exposure analysis to help understand priority of remediation
title: "Create Reachability Analysis Report: [CVE]"
labels: ['reachability-analysis', 'security']
assignees:
  - felickz
body:
  - type: markdown
    attributes:
      value: |
        Generate a report and place at: `/reachability-reports/Dependabot-Reachability-<DependabotAlert#>-<Reachable/Uknown/Unreachable>.md` file

  - type: textarea
    id: alert
    attributes:
      label: Dependabot Alert Link
      description: "Please provide a link to the dependabot alert"
      placeholder: "https://github.com/octofelickz/dependabot-reachability-analysis/security/dependabot/1"
    validations:
      required: true

  - type: textarea
    id: CVE
    attributes:
      label: Dependabot Alert CVE
      description: "Give the CVE"
      placeholder: "CVE-2019-10744"
    validations:
      required: true      

  - type: textarea
    id: analysis
    validations:
      required: true
    attributes:
      label: Reachability
      description: "Details for analysis"
      value: |
        Generate a vulnerability reachability report and place at: `/reachability-reports/Dependabot-Reachability-<DependabotAlert#>-<Reachable/Uknown/Unreachable>.md` file
      
        # Reachability Analysis
        
         perform vulnerability exposure analysis against the codebase  to help understand priority of remediation.  This is a decision analysis that will determine if this vulnerability Reachable/Unknown/Unreachable. Use the dependabot alert, the related GitHub advisory / CVE / repo links and any further knowledge to expand the scenario.  The github advisory and dependabot alert will list function call information IF available.
        
        There are two major scenarios:
        
        1 - Security Advisory lists function calls that we can search our codebase to understand potential exposure
        
        
        This will lead you to check two different scenarios:
        
        ## Direct dependencies.  
        
        ### Direct and Reachable
        This is when we directly depend on the ecosystem/package/version that the dependabot alert has deemed vulnerable to the given CVE/Advisory.  You will need to inspect the package manifest to confirm the package is indeed referenced.  A higher confidence will be given if we can find the exact version of the dependency in a package-lock (or found in the github dependency graph).  From here we need to search the github codebase and understand if any of the code in the entire github repo is calling the function name (a string search would be fast to find all potential matches). Then ensure the scope of the function is being referenced from the vulnerable dependency by checking namespaces/imports (ensure its not just a function with the same name in a different namespace).  If this is true, stop further analysis - we now know this is reachable and should be prioritized and fixed.  
        
        ### Direct and Unreachable
        If this package is only referenced directly, and the dependency analysis detects not used in any transitive AND we do not find any reachable functions - mark it as Unreachable
        
        
        ## Transitive dependencies.  
        
        If a direct dependency on the vulnerable function is not found, we need to dig further to look for a dependency down the chain that has been referenced that is vulnerable.  If there is a dependabot alert, there is a very high chance that this is true but with a package lock - validate that the dependency/version is actually found in the manifest.  Use the package manager cli to get more details about which is the parent dependency package/version of our known vulnerable one. From here do additional research outside of the codebase to investigate if any of the transitive dependencies (there may be more than one) by package/version that pulls in the vulnerable package.  Check to confirm or deny the possibility of those parent dependencies calling the vulnerable functions.  If there is confidence that package is calling a vulnerable function, mark it as Reachable.  If there is not confidence mark it as Unknown reachability - we will likely not have enough confidence in walking every possible permutation of transitive dependencies to have confidence that it would be unreachable. If you find this state, note your confidence but mark as unknown reachabilitiy.
        
        
        
        2 - The Security Advisory does not mention any function calls and therefore we are unable to perform an analysis.  This puts us into an unknown state, we cannot be sure if this advisory impacts us.
        
        
        # Work to be done
        
        Assume the role of an expert security researcher and perform the above reachability analysis.  Write up your reachability report into a Dependabot-Reachability-<DependabotAlert#>-<Reachable/Uknown/Unreachable>.md file.  Include all relevant findings that prove/disprove reachability and give next step recommendations to the development team on whether they should upgrade the dependency as prioritized because it is vulnerable and reachable, unknown reachability and provide further guidance on how to manually investigate, or unreachable and therefore can deprioritize or ignore.
